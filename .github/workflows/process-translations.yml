# .github/workflows/process-translations.yml - Updated with branch management
name: Process Translation Submissions

on:
  # Triggered by Cloudflare Worker
  repository_dispatch:
    types: [translation-submission]

  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      translation_file:
        description: 'Path to translation JSON file'
        required: false
        type: string

env:
  NODE_VERSION: '18'

jobs:
  process-translation:
    name: Process Translation and Create PR
    runs-on: ubuntu-latest

    permissions:
      contents: write      # To create branches and commits
      pull-requests: write # To create pull requests
      issues: write        # To add comments

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # Step 2: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Step 3: Configure Git
      - name: Configure Git
        run: |
          git config --global user.name "Translation Bot"
          git config --global user.email "translations@yourdomain.com"

      # Step 4: Process the translation
      - name: Process translations
        id: process
        run: |
          node .github/scripts/process-translations.js "${{ github.event.inputs.translation_file || '' }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_EVENT_PATH: ${{ github.event_path }}

      # Step 5: Check if target branch exists
      - name: Check target branch
        id: check_branch
        run: |
          TARGET_BRANCH="${{ steps.process.outputs.target_branch }}"
          
          # Check if branch exists on remote
          if git ls-remote --heads origin "$TARGET_BRANCH" | grep -q "$TARGET_BRANCH"; then
            echo "Branch exists, checking out"
            git fetch origin "$TARGET_BRANCH"
            git checkout "$TARGET_BRANCH"
            git pull origin "$TARGET_BRANCH"
            echo "branch_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Creating new branch"
            git checkout -b "$TARGET_BRANCH"
            echo "branch_exists=false" >> $GITHUB_OUTPUT
          fi

      # Step 6: Add and commit changes
      - name: Commit changes
        id: commit
        run: |
          # Add changed files
          git add -A
          
          # Check if there are changes
          if git diff --staged --quiet; then
            echo "No changes to commit"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          
            # Commit changes
            git commit -m "Update translations: ${{ steps.process.outputs.languages }}
          
            Translator: ${{ steps.process.outputs.translator_name }}
            Email: ${{ steps.process.outputs.translator_email }}
            Changes: ${{ steps.process.outputs.translation_count }}
            Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          
            # Push the branch
            git push origin "${{ steps.process.outputs.target_branch }}"
          fi

      # Step 7: Check for existing PR
      - name: Check for existing PR
        id: check_pr
        if: steps.commit.outputs.has_changes == 'true'
        run: |
          # Check if PR already exists for this branch
          EXISTING_PR=$(gh pr list --base main --head "${{ steps.process.outputs.target_branch }}" --json number --jq '.[0].number' || echo "")
          
          if [ -n "$EXISTING_PR" ]; then
            echo "pr_exists=true" >> $GITHUB_OUTPUT
            echo "pr_number=$EXISTING_PR" >> $GITHUB_OUTPUT
          else
            echo "pr_exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 8: Create or update Pull Request
      - name: Create Pull Request
        if: steps.commit.outputs.has_changes == 'true' && steps.check_pr.outputs.pr_exists != 'true'
        id: create_pr
        run: |
          PR_URL=$(gh pr create \
            --title "${{ steps.process.outputs.pr_title }}" \
            --body "${{ steps.process.outputs.pr_body }}" \
            --base main \
            --head "${{ steps.process.outputs.target_branch }}" \
            --label "translations,automated,needs-review")
          
          echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
          
          # Extract PR number from URL
          PR_NUMBER=$(echo "$PR_URL" | grep -o '[0-9]*$')
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 9: Update existing PR
      - name: Update existing PR
        if: steps.commit.outputs.has_changes == 'true' && steps.check_pr.outputs.pr_exists == 'true'
        run: |
          # Add a comment to the existing PR
          gh pr comment ${{ steps.check_pr.outputs.pr_number }} \
            --body "## ðŸ”„ Updated with new translations

            This PR has been updated with additional translation changes.
          
            **Latest Update:**
            - Languages: ${{ steps.process.outputs.languages }}
            - Changes: ${{ steps.process.outputs.translation_count }}
            - Translator: ${{ steps.process.outputs.translator_name }}
            - Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 10: Notify completion (optional)
      - name: Send notification
        if: steps.commit.outputs.has_changes == 'true' && env.SLACK_WEBHOOK
        run: |
          if [ "${{ steps.check_pr.outputs.pr_exists }}" == "true" ]; then
            ACTION="Updated"
            PR_URL="https://github.com/${{ github.repository }}/pull/${{ steps.check_pr.outputs.pr_number }}"
          else
            ACTION="Created"
            PR_URL="${{ steps.create_pr.outputs.pr_url }}"
          fi
          
          curl -X POST ${{ secrets.SLACK_WEBHOOK }} \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "Translation PR '"$ACTION"'!",
              "blocks": [{
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Translation PR '"$ACTION"'*\nâ€¢ Languages: ${{ steps.process.outputs.languages }}\nâ€¢ Changes: ${{ steps.process.outputs.translation_count }}\nâ€¢ Translator: ${{ steps.process.outputs.translator_name }}\nâ€¢ <'"$PR_URL"'|View PR>"
                }
              }]
            }'