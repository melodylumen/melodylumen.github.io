# This workflow processes translation submissions from Cloudflare Workers
name: Process Translation Submissions

on:
  # Triggered by Cloudflare Worker
  repository_dispatch:
    types: [translation-submission]

  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      translation_file:
        description: 'Path to translation JSON file'
        required: false
        type: string

env:
  NODE_VERSION: '18'

jobs:
  process-translation:
    name: Process Translation and Create PR
    runs-on: ubuntu-latest

    permissions:
      contents: write      # To create branches and commits
      pull-requests: write # To create pull requests
      issues: write        # To add comments

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # Step 2: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Step 3: Configure Git
      - name: Configure Git
        run: |
          git config --global user.name "Translation Bot"
          git config --global user.email "translations@yourdomain.com"

      # Step 4: Process the translation
      - name: Process translations
        id: process
        run: |
          node .github/scripts/process-translations.js "${{ github.event.inputs.translation_file || '' }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_EVENT_PATH: ${{ github.event_path }}

      # Step 5: Create feature branch
      - name: Create feature branch
        id: branch
        run: |
          # Generate branch name
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          BRANCH_NAME="translations/update-${TIMESTAMP}"
          echo "branch_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT
          
          # Create and checkout new branch
          git checkout -b $BRANCH_NAME
          
          # Add changed files
          git add -A
          
          # Check if there are changes
          if git diff --staged --quiet; then
            echo "No changes to commit"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            # Commit changes
            git commit -m "Update translations: ${{ steps.process.outputs.languages }}
          
            Translator: ${{ steps.process.outputs.translator_name }}
            Email: ${{ steps.process.outputs.translator_email }}
            Changes: ${{ steps.process.outputs.translation_count }}
            Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          
            # Push the branch
            git push origin $BRANCH_NAME
          fi

      # Step 6: Create Pull Request
      - name: Create Pull Request
        if: steps.branch.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.branch.outputs.branch_name }}
          title: "${{ steps.process.outputs.pr_title }}"
          body: "${{ steps.process.outputs.pr_body }}"
          labels: |
            translations
            automated
            needs-review
          reviewers: |
            translation-reviewers
            ${{ github.repository_owner }}

      # Step 7: Notify completion (optional)
      - name: Send notification
        if: steps.branch.outputs.has_changes == 'true' && env.SLACK_WEBHOOK
        run: |
          curl -X POST ${{ secrets.SLACK_WEBHOOK }} \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "New translation PR created!",
              "blocks": [{
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*New Translation PR Created*\n• Languages: ${{ steps.process.outputs.languages }}\n• Changes: ${{ steps.process.outputs.translation_count }}\n• Translator: ${{ steps.process.outputs.translator_name }}"
                }
              }]
            }'